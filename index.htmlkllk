<!DOCTYPE html>
<http>
  <meta
    name="viewport"
    content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0"
  />

  <!-- three.js library -->
  <script src="vendor/three.js/build/three.min.js"></script>
  <!-- three.js load GLTF -->
  <script src="vendor/three.js/GLTFLoader.js"></script>
  <!-- ar.js -->
  <script src="../build/ar-threex.js"></script>

  <script>
    THREEx.ArToolkitContext.baseURL = "../";
  </script>

  <body
    style="
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      margin: 0px;
      overflow: hidden;
    "
  >
    <style>
      .arjs-loader {
        margin: 0 auto;
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .arjs-loader-spinner {
        z-index: 10;
        -webkit-transform: spin 1s linear infinite;
        animation: spin 1s linear infinite;
        border: 3px solid #ddd;
        border-top: 3px solid #42a5f5;
        border-radius: 50%;
        height: 75px;
        width: 75px;
      }

      @-webkit-keyframes spin {
        to {
          border-top-color: #42a5f5;
          -webkit-transform: rotate(360deg);
          transform: rotate(360deg);
        }
      }

      @keyframes spin {
        to {
          border-top-color: #42a5f5;
          -webkit-transform: rotate(360deg);
          transform: rotate(360deg);
        }
      }
    </style>
    <div class="arjs-loader">
      <div class="arjs-loader-spinner"></div>
    </div>
    <script>
          //////////////////////////////////////////////////////////////////////////////////
          //		Init
          //////////////////////////////////////////////////////////////////////////////////

          var renderer = new THREE.WebGLRenderer({
              antialias: true,
              alpha: true,
              precision: "mediump",
          });

          var clock = new THREE.Clock();

          var mixers = [];

          renderer.setPixelRatio(window.devicePixelRatio);

          renderer.setClearColor(new THREE.Color("lightgrey"), 0)
          renderer.setSize( window.innerWidth, window.innerHeight );
          renderer.domElement.style.position = "absolute"
          renderer.domElement.style.top = "0px"
          renderer.domElement.style.left = "0px"
          document.body.appendChild( renderer.domElement );

          // init scene and camera
          var scene = new THREE.Scene();

          //////////////////////////////////////////////////////////////////////////////////
          //		Initialize a basic camera
          //////////////////////////////////////////////////////////////////////////////////

          // Create a camera
          var camera = new THREE.Camera();
          scene.add(camera);

          var light = new THREE.AmbientLight(0xffffff);
          scene.add(light);

          ////////////////////////////////////////////////////////////////////////////////
          //          handle arToolkitSource
          ////////////////////////////////////////////////////////////////////////////////

          var arToolkitSource = new THREEx.ArToolkitSource({
              sourceType : "webcam",
              sourceWidth: 480,
              sourceHeight: 640,
          })

          arToolkitSource.init(function onReady(){
              // use a resize to fullscreen mobile devices
              setTimeout(function() {
                  onResize()
              }, 1000);
          })

          // handle resize
          window.addEventListener("resize", function(){
              onResize()
          })

          // listener for end loading of NFT marker
          window.addEventListener('arjs-nft-loaded', function(ev){
            console.log(ev);
          })

          function onResize(){
              arToolkitSource.onResizeElement()
              arToolkitSource.copyElementSizeTo(renderer.domElement)
              if( arToolkitContext.arController !== null ){
                  arToolkitSource.copyElementSizeTo(arToolkitContext.arController.canvas)
              }
          }

          ////////////////////////////////////////////////////////////////////////////////
          //          initialize arToolkitContext
          ////////////////////////////////////////////////////////////////////////////////

          // create atToolkitContext
          var arToolkitContext = new THREEx.ArToolkitContext({
              detectionMode: 'mono',
              canvasWidth: 480,
              canvasHeight: 640,
          }, {
              sourceWidth: 480,
              sourceHeight: 640,
          })

          // initialize it
          arToolkitContext.init(function onCompleted(){
              // copy projection matrix to camera
              camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
          })
          console.log(arToolkitContext);

          ////////////////////////////////////////////////////////////////////////////////
          //          Create a ArMarkerControls
          ////////////////////////////////////////////////////////////////////////////////

          // init controls for camera
          var markerControls = new THREEx.ArMarkerControls(arToolkitContext, camera, {
              type : "image",
              descriptorsUrl : "https://cdn.glitch.global/3fa4a16f-4f3b-4a0e-b959-ce65bca792dd/atari.mind?v=1677193285803,"
              changeMatrixMode: 'cameraTransformMatrix'
          })

          scene.visible = false

          var root = new THREE.Object3D();
          scene.add(root);

          //////////////////////////////////////////////////////////////////////////////////
          //		add an object in the scene
          //////////////////////////////////////////////////////////////////////////////////

          var threeGLTFLoader = new THREE.GLTFLoader();
          var model;

          threeGLTFLoader.load("https://cdn.glitch.global/3fa4a16f-4f3b-4a0e-b959-ce65bca792dd/atarig.glb?v=1677189684851", function (gltf) {
              model = gltf.scene.children[0];
              model.name = "atarig";

              var animation = gltf.animations[0];
              var mixer = new THREE.AnimationMixer(model);
              mixers.push(mixer);
              var action = mixer.clipAction(animation);
              action.play();

              root.matrixAutoUpdate = false;
              root.add(model);

              model.position.z = -100;
              //model.position.z = 100;

              window.addEventListener('arjs-nft-init-data', function(nft) {
                console.log(nft);
                var msg = nft.detail;
                model.position.y = (msg.height / msg.dpi * 2.54 * 10)/2.0; //y axis?
                model.position.x = (msg.width / msg.dpi * 2.54 * 10)/2.0; //x axis?
              })


              //////////////////////////////////////////////////////////////////////////////////
              //		render the whole thing on the page
              //////////////////////////////////////////////////////////////////////////////////

              var animate = function() {
                  requestAnimationFrame(animate);

                  if (mixers.length > 0) {
                      for (var i = 0; i < mixers.length; i++) {
                          mixers[i].update(clock.getDelta());
                      }
                  }

                  if (!arToolkitSource.ready) {
                      return;
                  }

                  arToolkitContext.update( arToolkitSource.domElement )

                  // update scene.visible if the marker is seen
                  scene.visible = camera.visible;

                  renderer.render(scene, camera);
              };

              requestAnimationFrame(animate);
          }
      );
    </script>
    <a-assets>
      <img
        id="atari"
        src="https://cdn.glitch.global/3fa4a16f-4f3b-4a0e-b959-ce65bca792dd/atari.mind?v=1677193285803"
      />
      <a-asset-item
        id="atarig"
        src="https://cdn.glitch.global/3fa4a16f-4f3b-4a0e-b959-ce65bca792dd/atarig.glb"
      ></a-asset-item>
    </a-assets>
    <a-camera position="0 0 0" look-controls="enabled: false"> </a-camera>

    <a-entity mindar-image-target="targetIndex: 0">
      <a-plane
        src="#atari"
        position="0 0 0"
        height="0.552"
        width="1"
        rotation="0 0 0"
      ></a-plane>
      <a-gltf-model
        rotation="0 0 0 "
        position="0 0 0.1"
        scale="0.005 0.005 0.005"
        src="#atarig"
      >
      </a-gltf-model>
    </a-entity>
    <a-entity camera></a-entity>
  </body>
</http>
